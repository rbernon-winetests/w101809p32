name: macos
on: [push]

env:
  repository: rbernon/wine
  builds: '["64"]'
  configs: '["without-mingw"]'
  refs: '["wine-6.0-rc2", "wine-staging-6.0-rc2", "wine-staging-6.0-rc1", "wine-5.22", "wine-staging-5.22", "wine-5.21", "wine-staging-5.21", "wine-5.20", "wine-staging-5.20", "wine-5.19", "wine-staging-5.19", "wine-5.18", "wine-staging-5.18"]'

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.set-matrix.outputs.builds }}
      configs: ${{ steps.set-matrix.outputs.configs }}
      refs: ${{ steps.set-matrix.outputs.refs }}
    steps:
    - id: set-matrix
      run: |
        echo '::set-output name=builds::${{ env.builds }}'
        echo '::set-output name=configs::${{ env.configs }}'
        echo '::set-output name=refs::${{ env.refs }}'

  build:
    runs-on: macos-latest
    needs: matrix
    strategy:
      matrix:
        build: ${{ fromJson(needs.matrix.outputs.builds) }}
        config: ${{ fromJson(needs.matrix.outputs.configs) }}
        ref: ${{ fromJson(needs.matrix.outputs.refs) }}

    env:
      CONFIGURE_OPTS: --silent --disable-tests CROSSDEBUG=split
      CONFIGURE_OPTS_32:
      CONFIGURE_OPTS_64: --enable-win64

    steps:
      - name: Dependencies
        run: |
          brew install bison
          brew install ccache
          brew install mingw-w64
          find /usr/local/opt/
          ls -lisa /usr/local/opt/ccache/libexec/*
          ls -lisa /usr/local/opt/bison/bin/
          ls -lisa /usr/local/opt/mingw-w64/bin/

  #     - name: Checkout
  #       uses: actions/checkout@v2.3.2
  #       with:
  #         repository: ${{ env.repository }}
  #         ref: ${{ matrix.ref }}

  #     - name: Cache
  #       uses: actions/cache@v1.1.0
  #       with:
  #         path: .ccache
  #         key:
  #           ccache-macos-${{ matrix.build }}-${{ matrix.config }}-${{ matrix.ref }}-${â€Š{ github.sha }}
  #         restore-keys: |
  #           ccache-macos-${{ matrix.build }}-${{ matrix.config }}-${{ matrix.ref }}-
  #           ccache-macos-${{ matrix.build }}-${{ matrix.config }}-
  #           ccache-macos-${{ matrix.build }}-

  #     - name: Prepare
  #       run: |
  #         autoreconf -fi
  #         ./tools/make_requests

  #     - name: Configure
  #       run: |
  #         export CCACHE_DIR=$PWD/.ccache
  #         export PATH=/usr/local/opt/ccache/libexec:/usr/local/opt/bison/bin/:$PATH
  #         mkdir build && cd build && ../configure $CONFIGURE_OPTS $CONFIGURE_OPTS_${{ matrix.build }} --${{ matrix.config }}

  #     - name: Build
  #       run: |
  #         export CCACHE_DIR=$PWD/.ccache
  #         export PATH=/usr/local/opt/ccache/libexec:/usr/local/opt/bison/bin/:$PATH
  #         make -C build --silent -j4

  #     - name: Archive
  #       run: |
  #         mv build wine${{ matrix.build }}
  #         tar chJf ${{ matrix.ref }}-macos-${{ matrix.build }}-${{ matrix.config }}.tar.xz \
  #           --exclude=*.o --exclude=*.a --exclude=*.debug --exclude=*.pdb \
  #           wine${{ matrix.build }}

  #     - name: Upload
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.ref }}-macos-${{ matrix.build }}-${{ matrix.config }}.tar.xz
  #         path: ${{ matrix.ref }}-macos-${{ matrix.build }}-${{ matrix.config }}.tar.xz

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [matrix, build]
  #   strategy:
  #     matrix:
  #       ref: ${{ fromJson(needs.matrix.outputs.refs) }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2.3.2

  #     - name: Download
  #       uses: actions/download-artifact@v2

  #     - name: Release
  #       run: |
  #         hub release create -m "${{ matrix.ref }} macOS builds" $(find . -type f -name '${{ matrix.ref }}-*.tar.xz' -printf '-a %p ') ${{ matrix.ref }}-macos-builds
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clean:
    runs-on: ubuntu-latest
    needs: [matrix]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cleanup
        uses: rbernon/workflow-cleanup@main
        with:
          workflow: macos.yml
